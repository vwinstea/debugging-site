import { Box, Link, Typography } from "@mui/material";
import classNames from "classnames";
import React, { useEffect, useRef, useState } from "react";
import styles from "./DevTools.module.css";

function DevTools() {
  const [textEdited, setTextEdited] = useState(false);
  const editTextRef = useRef<HTMLParagraphElement>(null);

  const initialText = "Hello, my name is _______";

  const handleEditText = () => {
    if (!textEdited && editTextRef.current?.textContent !== initialText) {
      setTextEdited(true);
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      handleEditText();
    }, 2000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Box>
      <Typography>
        Dev Tools are a critical feature of any browser, and are absolutely
        crucial to making a website that performs well and runs smoothly.
      </Typography>
      <Typography variant="h4">What are Dev Tools?</Typography>
      <Typography>
        Chances are, you have probably used your browser&apos;s dev tools
        before. If you have ever right clicked on a page and used inspect
        element to edit the content of a page, you have used one of the many dev
        tools that are available to you. If you are unfamiliar with dev tools,
        try right clicking on the text below and selecting inspect or inspect
        element. This will give you access to this webpage&apos;s DOM, which you
        can now freely edit and change the content of. Try editing the text
        below to write your name to in the blank.
      </Typography>
      <div
        className={classNames(
          styles.editable,
          textEdited ? styles.complete : styles.incomplete
        )}
        tabIndex={0}
        onKeyDown={handleEditText}
        role="textbox"
      >
        <p ref={editTextRef}>{initialText}</p>
      </div>
      <Typography variant="caption">
        Note: Dev Tools are available on all major browsers including, Chrome,
        Firefox, Safari, and Edge. On some browsers, such as Safari, the dev
        tools are disabled by default and you have to enable them in the
        settings. In this demonstration, we will be using Chrome Dev Tools since
        it&apos; the most robust, but most features are shared across browsers,
        and it never hurts to have different people on your team testing out
        your site on different browsers since they can all render webpages a
        little differently.
      </Typography>
      <Typography>
        {" "}
        All right! Now that you are aware of your browser&apos;s Dev Tools, lets
        start diving into all of its key features
      </Typography>
      <Typography variant="h4">The Essentials</Typography>
      <Typography>
        These are the tools that every web developer should be familiar with. I
        use them almost every time that I&apos;m developing and they can make a
        world&apos;s difference in your ability to mess around with code and
        find bugs.
      </Typography>
      <Typography variant="h5">The Elements View</Typography>
      <Typography>
        The elements view is one of the most useful parts of Dev Tools. This is
        what gives you access to all of the HTML and CSS in your webpage, which
        you are free to view, modify, and delete.
      </Typography>
      <Typography variant="h6">Selecting an Element</Typography>
      <Typography>
        In order to make use of the elements view, the first step you must take
        is selecting an element. To do this, you can either right click on the
        element in the webpage and click inspect, or if you already have the dev
        tools open, you may click the inspect element button in the top left of
        the dev tools and click the element that way. Both methods should open
        up the elements view with your desired element selected. Try it now with
        the text below.
      </Typography>
      <div>
        <p>Inspect element here</p>
      </div>
      <Typography variant="h6">Viewing element properties</Typography>
      <Typography>
        Inspecting an element in dev tools gives you access to a lot of new
        information. This info is divided between the DOM and the styles tab.
        <br />
        The DOM section is pretty self explanitory: it gives you access to all
        of the raw HTML generated by your webpage. Note that if you&apos;re
        using React, the real DOM will look different from the component tree in
        your codebase since only HTML tags show up in the DOM, not React
        components. If you do want to inspect your component hiarchy, read about
        React Dev Tools later in this walkthrough.
        <br />
        The styles section has a few key points of interest. First off, it will
        list all of the styles that are applied to the element. This will
        include styles applied to only the element, as well as rules applied by
        the element&apos;s class and all styles applied to that tag.
        Additionally, the element&apos; box model will be displayed, including
        the conetnt size, padding, boarder, and padding. If you are unfamiliar
        with the box model or need a quick refresher,{" "}
        <Link href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model">
          MDN has some great documentaion on it.
        </Link>
      </Typography>
      <Typography variant="h6">Editing element properties</Typography>
      <Typography>
        One of the best parts of Dev Tools is that all of the HTML and CSS you
        can view can also be edited! This can be very useful if you want to mess
        with the content of a webpage or try adding or removing styles. Editing
        directly with inspect element can be very valuable for rapid prototyping
        and development.
        <br />
        There are a few ways to edit the DOM, but by far the easiest is simply
        double clicking in the DOM and editing either the content or tags in the
        DOM. You can also drag around elements within the DOM to rearrange your
        webpage and try out new configurations. If you want even more control,
        right click on the DOM and click &quot;Edit as HTML&quot; so you can
        edit the DOM as if it were in a text editor. Be careful about making too
        many changes at once in this mode though, since these changes
        aren&apos;t saved locally so once you refresh the page, your changes
        will be gone.
        <br />
        Editing styles is where the real meat of Dev Tools is. Having the
        ability to rapidly add, edit, and delete styles will allow you to nail
        down your CSS rules in a falsh and can help you identify any CSS rules
        that aren&apos;t working as expected. First off, Dev Tools is great at
        identifying unused styles. If any styles appear with a{" "}
        <s>strikethrough</s>, that means it is not being used, so as long as you
        don&apos;t see it used in any other part of your program, you can delete
        it. This is a very effective tool for cleaning up your CSS.
        <br />
        Additionally, Dev Tools is great for testing out new styles on your
        webpage. The styles tab allows you to quickly try out new styles or
        modify existing styles. To add a new rule try clicking on the right edge
        of any existing CSS rule or in an existing set of braces. To modify an
        existing rule, just double click the existing rule and type. Lastly, if
        you want to temporarily disable a rule, just click on the checkbox that
        appears whe you hover over the left of the rule. Using all of these CSS
        tools allow you to quickly view how CSS modifications may effect your
        site, and once you have made the modifications you like, just copy over
        the CSS rules you added so they are permenantly changed.
        <br />
        There are also a couple of other ways to edit CSS that you may find
        helpful. The first is that the box model view is editable, so if
        you&apos;d like to you may modify the numbers inside the content box or
        on the edges of the padding, border, and margin boxes. Modifying These
        numbers will also automatically generate a new CSS rule in the CSS
        element.style section, which can then be copied and added to your code
        to perminantly keep it. Additionally, if you are dealing with
        pseudoclasses such as :hover or :focus, you may click on the :hov button
        next to the filter bar to permenantly turn on that pseudoclass while
        you&apos;re debugging so you don&apos;t have to constantly have your
        mouse hovering over an element to debug its CSS on hover.
      </Typography>
      <Typography variant="h5">The Console View</Typography>
      <Typography variant="h4">Designing For All Screens</Typography>
      <Typography variant="h4">React Dev Tools</Typography>
      <Typography variant="h4">Advanced Features</Typography>
      <Typography variant="h5">The Sources View</Typography>
      <Typography variant="h5">The Network View</Typography>
      <Typography variant="h5">Lighthouse</Typography>
    </Box>
  );
}

export default DevTools;
